//
//  ReportViewModel.swift
//  Feature
//
//  Created by Ïù¥Î≤îÏ§Ä on 2023/12/25.
//

import Foundation
import Combine
import Service
import Alamofire

final class ReportViewModel {
    
    private let jsonDecoder = JSONDecoder()
    private var cancelBag = Set<AnyCancellable>()
    private let accessToken = KeychainStore.shared.read(label: "accessToken")
    
    private let reportList: [String] = ["ü§¨ ÎπÑÏÜçÏñ¥/Ìè≠Ïñ∏/ÎπÑÌïò/ÏùåÎûÄÏÑ± ÎÇ¥Ïö©",
                                        "ü§Ø Í∞àÎì± Ï°∞Ïû• Î∞è ÌóàÏúÑÏÇ¨Ïã§ Ïú†Ìè¨",
                                        "ü§ë ÎèÑÎ∞∞/Í¥ëÍ≥†ÏÑ± ÎÇ¥Ïö©/Ï¢ÖÍµê Í∂åÏú†",
                                        "üò± Î∂ÄÏ†ÅÏ†àÌïú ÎãâÎÑ§ÏûÑ ÏÇ¨Ïö©",
                                        "üí¨ Í∑∏ Ïô∏ Í∏∞ÌÉÄÏÇ¨Ïú†"]
    
    init() {
        
    }
    // TODO: - Ïã†Í≥† ÏôÑÎ£å Ïãú api Ìò∏Ï∂ú -> (ÌîºÎìú ÏïÑÏù¥Îîî ÏóÜÏñ¥ÏÑú Ïó∞Îèô ÏïÑÏßÅ X)
    private func setReports(reason: String, type: String, targetId: Int) {
        let params: [String: Any] = ["reason": reason,
                                     "type": type,
                                     "target_id": targetId]
        var headers: HTTPHeaders = [
            "Content-Type": "application/json",
            "Authorization": "Bearer " + accessToken!
        ]
        NetworkWrapper.shared.postBasicTask(stringURL: "/reports", parameters: params, header: headers) {[weak self] result in
            switch result {
            case .success(let response):
                print(response)
            case .failure(let error):
                print(error)
            }
            
        }
    }
    
    func reportListCount() -> Int {
        return reportList.count
    }
    
    func getReportList(_ index: Int) -> String {
        return reportList[index]
    }
}
